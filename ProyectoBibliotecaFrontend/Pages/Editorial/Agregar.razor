@page "/editorial/agregar"

@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ILocalStorageService _localStorageService

<MudText Typo="Typo.h2" Class="ml">Nueva Editorial</MudText>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <EditForm Model="editorial" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator/>
                <MudCard Style="background-color: #F3E5F5;">
                    <MudCardContent>
                        <MudTextField Label="Nombre" @bind-Value="editorial.Nombre" For="@(() => editorial.Nombre)" />
                        <MudTextField Label="Pais" @bind-Value="editorial.Pais" For="@(() => editorial.Pais)" />
                        <MudTextField Label="Email" @bind-Value="editorial.Email" For="@(() => editorial.Email)" />
                        <MudTextField Label="Telefono" @bind-Value="editorial.Telefono" For="@(() => editorial.Telefono)" />
                        <MudDivider />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Href="@($"/editorial/index")" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary"
                                   Class="text-center">Regresar</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Class="ml-auto">Guardar</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
            @if (showLeaveAlert)
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">No se pudo guardar.</MudAlert>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    bool success;
    private bool showLeaveAlert = false;
    Editorial editorial = new Editorial();  // Cambié Categoria a Editorial

    protected override async Task OnInitializedAsync()
    {
        httpClient.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await save();
        success = true;
        StateHasChanged();
    }

    private async Task save()
    {
        var httpResponse = await httpClient.PostAsJsonAsync<Editorial>("editoriales", editorial);  // Cambié la ruta a "editoriales"

        if (!(httpResponse.StatusCode == System.Net.HttpStatusCode.OK))
        {
            showLeaveAlert = true;
        }
        else
        {
            navigationManager.NavigateTo("editorial/index");  // Cambié la ruta de redirección
        }
    }

    private void CloseMe(bool value)
    {
        showLeaveAlert = false;
    }
}

